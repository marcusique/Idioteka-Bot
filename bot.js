const Telegraf = require('telegraf'),
  Markup = require('telegraf/markup'),
  Extra = require('telegraf/extra'),
  axios = require('axios'),
  cheerio = require('cheerio'),
  redis = require('./middleware/redis'),
  session = require('telegraf/session'),
  keys = require('./config/keys'),
  infoLogger = require('./middleware/infoLogger'),
  errorLogger = require('./middleware/errorLogger'),
  functions = require('./functions'),
  bot = new Telegraf(keys.telegramBotToken);

bot.use(session());

bot.action('MORE', ctx => {
  let date = functions.generateDate();

  //check redis cache
  redis.lrange(date, 0, -1, (err, result) => {
    if (err) {
      errorLogger.log({
        level: 'error',
        message: `CHAT: ${ctx.from.id}, USERNAME: ${ctx.from.username}, NAME: ${
          ctx.from.first_name
        } ${ctx.from.last_name}, ERROR_MSG: ${err.message}`
      });

      ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!');
      //cached result found, serving
    } else if (result.length > 0) {
      img = result[0];
      title = result[1];
      caption = result[2];
      requestUrl = result[3];

      const extra = Extra.markup(
        Markup.inlineKeyboard([Markup.callbackButton('–ï—â–µ', 'MORE')])
      );
      extra.caption = `<a href="${requestUrl}">${title}</a>\n\n${caption}`;
      extra.parse_mode = 'HTML';

      ctx.replyWithPhoto(img, extra);
      //cached result not found, requesting
    } else {
      let toCache = [];
      let requestUrl = `${keys.URL}${date}`;
      const extra = Extra.markup(
        Markup.inlineKeyboard([Markup.callbackButton('–ï—â–µ! üöÄ', 'MORE')])
      );

      axios
        .get(requestUrl)
        .then(html => {
          let $ = cheerio.load(html.data);
          let img = $('div.everiday-page-content-image > a > img').attr('src');
          let title = $('div.als-text-container > p.before_list').text();
          let caption = $('div.als-text-container > p')
            .next()
            .append('\n')
            .text()
            .trim();

          //adding to redis cache
          toCache.push(img, title, caption, requestUrl);
          redis.rpush.apply(redis, [`${date}`].concat(toCache));

          extra.caption = `<a href="${requestUrl}">${title}</a>\n\n${caption}`;
          extra.parse_mode = 'HTML';

          ctx.replyWithPhoto(img, extra);
        })
        .catch(err => {
          errorLogger.log({
            level: 'error',
            message: `CHAT: ${ctx.from.id}, USERNAME: ${
              ctx.from.username
            }, NAME: ${ctx.from.first_name} ${ctx.from.last_name}, ERROR_MSG: ${
              err.message
            }`
          });

          ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!');
        });
    }
  });
  infoLogger.log({
    level: 'info',
    message: `CHAT: ${ctx.from.id}, USERNAME: ${ctx.from.username}, NAME: ${
      ctx.from.first_name
    } ${ctx.from.last_name}`
  });
});

bot.start(ctx => {
  const extra = Extra.markup(
    Markup.inlineKeyboard([Markup.callbackButton('–ù–∞—á–Ω–µ–º! üöÄ', 'MORE')])
  );
  extra.parse_mode = 'HTML';
  extra.webPreview(false);

  ctx.reply(
    `–ü—Ä–∏–≤–µ—Ç! –Ø –ø—Ä–∏—Å—ã–ª–∞—é —Å–ª—É—á–∞–π–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏–∑ <a href="https://www.artlebedev.ru/kovodstvo/idioteka/">–ò–¥–∏–æ—Ç–µ–∫–∏</a>.
–î–ª—è —Å–ø—Ä–∞–≤–∫–∏ –Ω–∞–∂–º–∏ /help.
    `,
    extra
  );

  infoLogger.log({
    level: 'info',
    message: `CHAT: ${ctx.from.id}, USERNAME: ${ctx.from.username}, NAME: ${
      ctx.from.first_name
    } ${ctx.from.last_name}, MESSAGE: ${ctx.message.text}`
  });
});

bot.help(ctx => {
  const extra = Extra.markup(
    Markup.inlineKeyboard([Markup.callbackButton('–ù–∞—á–Ω–µ–º! üöÄ', 'MORE')])
  );
  extra.parse_mode = 'HTML';
  extra.webPreview(false);

  ctx.reply(
    `<b>–°–ø—Ä–∞–≤–∫–∞</b>

@idioteka_bot –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π –∏–∑ <a href="https://www.artlebedev.ru/kovodstvo/idioteka/">–ò–¥–∏–æ—Ç–µ–∫–∏</a> –°—Ç—É–¥–∏–∏ –ê—Ä—Ç–µ–º–∏—è –õ–µ–±–µ–¥–µ–≤–∞.

–†–∞–±–æ—Ç–∞–µ—Ç –≤ –æ–¥–Ω–æ–º —Ä–µ–∂–∏–º–µ ‚Äì –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–π —Å—Å—ã–ª–∫–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞–ø—Ä—è–º—É—é —Å –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã. –°–∫–æ—Ä–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å —Å–∞–π—Ç–∞ –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –±–æ—Ç–∞ –∏ –ø—Ä–∏ –≤—ã—Å–æ–∫–∏—Ö –Ω–∞–≥—Ä—É–∑–∫–∞—Ö –Ω–∞ —Å–∞–π—Ç –ò–¥–∏–æ—Ç–µ–∫–∏ –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –º–æ–∂–µ—Ç —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å—Å—è.

–ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤—Å–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ –Ω–µ–≥–æ, –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ –∫—ç—à. –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —Å–∫–æ—Ä–æ—Å—Ç—å –∫–∞–∂–¥–æ–π –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –∑–∞–≥—Ä—É–∑–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è.
     `,
    extra
  );
  infoLogger.log({
    level: 'info',
    message: `CHAT: ${ctx.from.id}, USERNAME: ${ctx.from.username}, NAME: ${
      ctx.from.first_name
    } ${ctx.from.last_name}, MESSAGE: ${ctx.message.text}`
  });
});

bot.launch();
